#!/usr/bin/env php
<?php

// twee -- a markup language for TiddlyWiki files
//
// Usage:
// twee [-w] [-a author] [-t target] [-p plugins] [-o output] [-r rssfile]
// source1 [source2, source3...]
//
// Compiles source files to a TiddlyWiki files. By default, it targets
// Twinkie.
//
// The -w switch warns you about broken links.
//
// The -a switch lets you set your name as author. Quote it to use spaces.
//
// The -t switch lets you target other versions of TiddlyWiki.
// Built-in parameters include:
//
// tw2 - TiddlyWiki 2.0
// twinkie - Twinkie
// gimcrackd - Gimcrackd
// tw - TiddlyWiki 1.2.39
// ipod - iPod notes
// html - flat HTML
// none|plugin - outputs source divs only. Useful for creating plugins.
//
// The -p switch adds plugins into the produced story file. This list should
// be comma-separated. e.g. -p debug,singlepassage. A plugin is named after
// the directory its 
//
// The -o switch outputs directly to a file. This is useful when outputting
// to iPod, since the resulting zip file is a binary file, but it also can
// be used to merge changes with an existing TiddlyWiki.
//
// Outputs to stdout if the -o switch isn't specified.
//
// The -r switch outputs an RSS feed to a file.
//
// This code was written by Chris Klimas <klimas@gmail.com>
// It is licensed under the GNU General Public License
// http://www.gnu.org/copyleft/gpl.html

if (PHP_VERSION < 5)
	die('Sorry, PHP 5 is required to use this tool. You are currently ' .
			'running ' . PHP_VERSION . ".\n\n");

require_once(dirname(__FILE__) . '/../lib/tiddlywiki.php');
$stderr = fopen('php://stderr', 'w');

// defaults

$target = 'jonah';
$check_links = false;
$author = 'twee';
$output = 'php://stdout';

// parse switches

for ($arg = 1; $arg < count($argv); $arg++)
	switch ($argv[$arg])
	{
		case '-t':
		$target = $argv[++$arg];
		break;
		
		case '-p':
		$plugins = $argv[++$arg];
				
		case '-w':
		$check_links = true;
		break;
		
		case '-a':
		$author = $argv[++$arg];
		break;
		
		case '-o':
		$output = $argv[++$arg];
		break;
	
		case '-r':
		$rss = $argv[++$arg];
		break;
	
		default:
		$files = array_slice($argv, $arg);
		break 2;
	}
	
// create the TiddlyWiki object

$tw = new TiddlyWiki($author);

foreach ($files as $file)
	$tw->addTwee(file_get_contents($file));
	
// FIXME: add in plugins

// check links if requested

if ($check_links)
	fwrite($stderr, $tw->checkLinks());

// if the output file already exists, try to merge it with our
// compiled TW

if (file_exists($output))
{
	$old = new TiddlyWiki($author);
	$old->addHtml(file_get_contents($output));
	$tw = $old->merge($tw);
}

// output

$out = fopen($output, 'w');

if (! $out)
{
	fwrite($stderr, "Error: couldn't open $out for writing");
	return -1;	
}

switch ($target)
{
	case 'ipod':
	fwrite($out, $tw->toiPod());
	break;
	
	case 'html':
	fwrite($out, $tw->toFlatHtml());
	break;
	
	default:
	fwrite($out, $tw->toHtml($target) . "\n");
	break;
}

fclose($out);

// output RSS if requested

if (isset($rss))
{
	$rssfile = fopen($rss, 'w');

	if (! $rssfile)
	{
		fwrite($stderr, "Error: couldn't open $rss for writing");
		return -1;	
	}
	
	fwrite($rssfile, $tw->toRss());
}

return true;

?>
